from datetime import date
from uuid import UUID

from sqlalchemy import UUID, Date, ForeignKey, Integer, text
from sqlalchemy.orm import Mapped, mapped_column, relationship

from .sys_base import SysBase


class AccountLists(SysBase):
    """
    This SQLAlchemy model stores account lists, linking accounts to product lists
    and defining their active periods.

    ivars:
        id: The primary key of the account list entry.
        :vartype id: int
        uuid: Unique identifier for the account list entry, generated by the database.
        :vartype uuid: UUID
        account_uuid: Foreign key referencing the associated account.
        :vartype account_uuid: UUID
        product_list_uuid: UUID referencing the associated product list.
        :vartype product_list_uuid: UUID
        start_on: The start date when the account list becomes active.
        :vartype start_on: date, optional
        end_on: The end date when the account list is no longer active.
        :vartype end_on: date, optional
        account: Relationship to the `Accounts` model.
        :vartype account: Accounts
        product_list: Relationship to the `ProductLists` model.
        :vartype: ProductLists
    """

    __tablename__ = "acc_account_lists"
    __table_args__ = {"schema": "sales"}

    id: Mapped[int] = mapped_column(
        Integer, primary_key=True, nullable=False, autoincrement=True
    )
    uuid: Mapped[UUID] = mapped_column(
        UUID(as_uuid=True),
        nullable=False,
        unique=True,
        server_default=text("gen_random_uuid()"),
    )

    account_uuid: Mapped[UUID] = mapped_column(
        UUID(as_uuid=True), ForeignKey(column="sales.acc_accounts.uuid"), nullable=False
    )
    product_list_uuid: Mapped[UUID] = mapped_column(
        UUID(as_uuid=True),
        ForeignKey(column="sales.pm_product_lists.uuid"),
        nullable=False,
    )

    start_on: Mapped[date] = mapped_column(Date, nullable=True)
    end_on: Mapped[date] = mapped_column(Date, nullable=True)

    # Parent relationships
    account = relationship("Accounts", back_populates="account_lists")
    product_list = relationship("ProductLists", back_populates="account_lists")
