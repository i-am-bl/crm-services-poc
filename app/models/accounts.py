from datetime import date
from uuid import UUID

from sqlalchemy import UUID, Date, Integer, String, text
from sqlalchemy.orm import Mapped, mapped_column, relationship

from .sys_base import SysBase


class Accounts(SysBase):
    """
    This SQLAlchemy model stores account details, including status, name, and contract period.

    ivars:
        id: The primary key of the account.
        :vartype id: int
        uuid: Unique identifier for the account, generated by the database.
        :vartype uuid: UUID
        sys_value_status_uuid: System-defined UUID representing the account status.
        :vartype sys_value_status_uuid: UUID, optional
        name: The name of the account.
        :vartype name: str, optional
        start_on: The start date of the account.
        :vartype start_on: date, optional
        end_on: The end date of the account.
        :vartype end_on: date, optional
        account_contracts: Relationship to the `AccountContracts` model.
        :vartype account_contracts: list of AccountContracts
        account_lists: Relationship to the `AcountLists` model.
        :vartype: account_lists: list of AccountLists
        entity_accounts: Relatioship to the `EntityAccounts` model.
        :vartype: entity_accounts: list of EntityAccounts
    """

    __tablename__ = "acc_accounts"
    __table_args__ = {"schema": "sales"}

    id: Mapped[int] = mapped_column(
        Integer, primary_key=True, nullable=False, autoincrement=True
    )
    uuid: Mapped[UUID] = mapped_column(
        UUID(as_uuid=True),
        nullable=False,
        unique=True,
        server_default=text("gen_random_uuid()"),
    )

    sys_value_status_uuid: Mapped[UUID] = mapped_column(
        UUID(as_uuid=True), nullable=True
    )

    name: Mapped[str] = mapped_column(String(255), nullable=True)
    start_on: Mapped[date] = mapped_column(Date, nullable=True)
    end_on: Mapped[date] = mapped_column(Date, nullable=True)

    # Child relationships
    account_contracts = relationship("AccountContracts", back_populates="account")
    account_lists = relationship("AccountLists", back_populates="account")
    account_products = relationship("AccountProducts", back_populates="account")
    entity_accounts = relationship("EntityAccounts", back_populates="account")
