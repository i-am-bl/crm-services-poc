from datetime import date
from uuid import UUID

from sqlalchemy import UUID, Date, Integer, text
from sqlalchemy.orm import Mapped, mapped_column, relationship

from .sys_base import SysBase


class Orders(SysBase):
    """
    Represents a sales order, capturing details such as the associated account, invoice,
    owner, approval status, and transaction date. This model establishes relationships
    with the `OrderItems` and `Invoices` models to track the individual items and the
    invoice associated with the order.

    ivars:
        id: The primary key of the order record.
        :vartype id: int
        uuid: Unique identifier for the order, automatically generated by the database.
        :vartype uuid: UUID
        account_uuid: Foreign key linking the order to a specific account.
        :vartype account_uuid: UUID
        invoice_uuid: Foreign key linking the order to a specific invoice (optional).
        :vartype invoice_uuid: UUID, optional
        owner_uuid: The UUID of the owner associated with the order (optional).
        :vartype owner_uuid: UUID, optional
        approved_by_uuid: The UUID of the person who approved the order (optional).
        :vartype approved_by_uuid: UUID, optional
        approved_on: The date when the order was approved (optional).
        :vartype approved_on: date, optional
        transacted_on: The date when the order was created or transacted.
        :vartype transacted_on: date, optional
        order_items: Relationship to the `OrderItems` model, representing the items in the order.
        :vartype order_items: list of OrderItems
        invoices: Relationship to the `Invoices` model, linking the order to its associated invoice(s).
        :vartype invoices: list of Invoices
    """

    __tablename__ = "om_sales_orders"
    __table_args__ = {"schema": "sales"}

    id: Mapped[int] = mapped_column(
        Integer, primary_key=True, nullable=False, autoincrement=True
    )
    uuid: Mapped[UUID] = mapped_column(
        UUID(as_uuid=True),
        nullable=False,
        unique=True,
        server_default=text("gen_random_uuid()"),
    )

    account_uuid: Mapped[UUID] = mapped_column(UUID(as_uuid=True), nullable=False)
    invoice_uuid: Mapped[UUID] = mapped_column(UUID(as_uuid=True), nullable=True)

    owner_uuid: Mapped[UUID] = mapped_column(UUID(as_uuid=True), nullable=True)
    approved_by_uuid: Mapped[UUID] = mapped_column(UUID(as_uuid=True), nullable=True)
    approved_on: Mapped[date] = mapped_column(Date, nullable=True)

    transacted_on: Mapped[Date] = mapped_column(Date, nullable=True)

    # Parent relationships
    order_items = relationship("OrderItems", back_populates="order")

    # Child relationships
    invoices = relationship("Invoices", back_populates="order")
