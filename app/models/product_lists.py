from datetime import date
from uuid import UUID

from sqlalchemy import UUID, Date, Integer, String, text
from sqlalchemy.orm import Mapped, mapped_column, relationship

from .sys_base import SysBase


class ProductLists(SysBase):
    """
    This SQLAlchemy model stores product lists, linking product entries to their active periods and ownership.

    ivars:
        id: The primary key of the product list entry.
        :vartype id: int
        uuid: Unique identifier for the product list entry, generated by the database.
        :vartype uuid: UUID
        owner_uuid: UUID referencing the owner of the product list, if applicable.
        :vartype owner_uuid: UUID, optional
        name: The name of the product list.
        :vartype name: str
        start_on: The start date when the product list becomes active.
        :vartype start_on: date
        end_on: The end date when the product list is no longer active.
        :vartype end_on: date
        account_lists: Relationship to the `AccountLists` model, linking the product list to account lists.
        :vartype account_lists: list of AccountLists
    """

    __tablename__ = "pm_product_lists"
    __table_args__ = {"schema": "sales"}

    id: Mapped[int] = mapped_column(
        Integer, primary_key=True, nullable=False, autoincrement=True
    )
    uuid: Mapped[UUID] = mapped_column(
        UUID(as_uuid=True), nullable=False, server_default=text("gen_random_uuid()")
    )

    owner_uuid: Mapped[UUID] = mapped_column(UUID(as_uuid=True), nullable=True)

    name: Mapped[str] = mapped_column(String(100), nullable=False)
    start_on: Mapped[date] = mapped_column(Date, nullable=False)
    end_on: Mapped[date] = mapped_column(Date, nullable=False)

    # Child relationships
    account_lists = relationship("AccountLists", back_populates="product_list")
    product_list_items = relationship(
        "ProductListItems", back_populates="product_lists"
    )
