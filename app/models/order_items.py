from decimal import Decimal
from uuid import UUID

from sqlalchemy import UUID, CheckConstraint, Integer, Numeric, String, text, ForeignKey
from sqlalchemy.orm import Mapped, mapped_column, relationship

from .sys_base import SysBase


class OrderItems(SysBase):
    """
    This SQLAlchemy model represents an item within an order, including details like the
    product list item, quantity, price, and adjustments made to the original price. It
    establishes relationships with the associated order and product list items.

    ivars:
        id: The primary key of the order item.
        :vartype id: int
        uuid: Unique identifier for the order item, generated by the database.
        :vartype uuid: UUID
        order_uuid: Foreign key linking the order item to a specific order.
        :vartype order_uuid: UUID
        product_list_item_uuid: Foreign key linking the order item to a specific product list item.
        :vartype product_list_item_uuid: UUID
        owner_uuid: The UUID of the owner associated with the order item.
        :vartype owner_uuid: UUID
        quantity: The quantity of the product in the order item.
        :vartype quantity: int
        original_price: The original price of the product in the order item.
        :vartype original_price: Decimal
        adjustment_type: The type of price adjustment applied to the original price (either "dollar" or "percentage").
        :vartype adjustment_type: str
        price_adjustment: The amount of the price adjustment.
        :vartype price_adjustment: Decimal
        order: Relationship to the `Orders` model representing the order associated with the item.
        :vartype order: Orders
        product_list_item: Relationship to the `ProductListItems` model representing the product list item associated with the order item.
        :vartype product_list_item: ProductListItems
    """

    __tablename__ = "om_order_items"
    __table_args__ = (
        CheckConstraint(
            "adjustment_type in ('dollar', 'percentage')",
            name="oder_items_adjustement_type",
        ),
        {"schema": "sales"},
    )
    id: Mapped[int] = mapped_column(
        Integer, primary_key=True, nullable=False, autoincrement=True
    )
    uuid: Mapped[UUID] = mapped_column(
        UUID(as_uuid=True),
        nullable=False,
        unique=True,
        server_default=text("gen_random_uuid()"),
    )

    order_uuid: Mapped[UUID] = mapped_column(
        UUID(as_uuid=True),
        ForeignKey(column="sales.om_sales_orders.uuid"),
        nullable=False,
    )
    product_list_item_uuid: Mapped[UUID] = mapped_column(
        UUID(as_uuid=True),
        ForeignKey(column="sales.pm_product_list_items.uuid"),
        nullable=False,
    )
    owner_uuid: Mapped[UUID] = mapped_column(UUID(as_uuid=True), nullable=False)

    quantity: Mapped[int] = mapped_column(
        Integer, nullable=False, server_default=text("1")
    )
    original_price: Mapped[Decimal] = mapped_column(Numeric(10, 2))
    adjustment_type: Mapped[str] = mapped_column(String(50), nullable=True)
    price_adjustment: Mapped[Decimal] = mapped_column(Numeric(10, 2), nullable=True)

    # Parent relationship
    order = relationship("Orders", back_populates="order_items")
    product_list_item = relationship("ProductListItems", back_populates="order_items")

    # Child relationsihps
    invoice_items = relationship("InvoiceItems", back_populates="order_item")
