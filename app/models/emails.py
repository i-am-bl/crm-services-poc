from uuid import UUID

from sqlalchemy import UUID, Integer, String, text, ForeignKey
from sqlalchemy.orm import Mapped, mapped_column, relationship

from .sys_base import SysBase


class Emails(SysBase):
    """
    This SQLAlchemy model stores email addresses linked to entities.

    ivars:
        id: The primary key of the email record.
        :vartype id: int
        uuid: Unique identifier for the email record, generated by the database.
        :vartype uuid: UUID
        entity_uuid: Foreign key referencing the associated entity.
        :vartype entity_uuid: UUID
        email: The email address associated with the entity.
        :vartype email: str
        username: The username part of the email address, if applicable.
        :vartype username: str, optional
        domain: The domain part of the email address, if applicable.
        :vartype domain: str, optional
        entity: Relationship to the `Entities` model.
        :vartype entity: Entities
    """

    __tablename__ = "em_emails"
    __table_args__ = {"schema": "sales"}

    id: Mapped[int] = mapped_column(
        Integer, primary_key=True, nullable=False, autoincrement=True
    )
    uuid: Mapped[UUID] = mapped_column(
        UUID(as_uuid=True),
        nullable=False,
        unique=True,
        server_default=text("gen_random_uuid()"),
    )

    entity_uuid: Mapped[UUID] = mapped_column(
        UUID(as_uuid=True), ForeignKey(column="sales.em_entities.uuid"), nullable=False
    )

    email: Mapped[str] = mapped_column(
        String(325),
        nullable=False,
    )
    username: Mapped[str] = mapped_column(String(325), nullable=True)
    domain: Mapped[str] = mapped_column(String(325), nullable=True)

    # Parent relationshpis
    entity = relationship("Entities", back_populates="emails")
