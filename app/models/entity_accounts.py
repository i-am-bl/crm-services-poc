from datetime import date
from uuid import UUID

from sqlalchemy import UUID, Date, Integer, text, ForeignKey
from sqlalchemy.orm import Mapped, mapped_column, relationship

from .sys_base import SysBase


class EntityAccounts(SysBase):
    """
    This SQLAlchemy model represents the association between entities and accounts,
    storing details about the relationship between them.

    ivars:
        id: The primary key of the entity-account relationship.
        :vartype id: int
        uuid: Unique identifier for the entity-account relationship, generated by the database.
        :vartype uuid: UUID
        entity_uuid: Foreign key referencing the associated entity.
        :vartype entity_uuid: UUID
        account_uuid: Foreign key referencing the associated account.
        :vartype account_uuid: UUID
        start_on: The start date of the entity-account relationship.
        :vartype start_on: date, optional
        end_on: The end date of the entity-account relationship.
        :vartype end_on: date, optional
        account: Relationship to the `Accounts` model.
        :vartype account: Accounts
        entity: Relationship to the `Entities` model.
        :vartype entity: Entities
    """

    __tablename__ = "em_entity_accounts"
    __table_args__ = {"schema": "sales"}
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    uuid: Mapped[UUID] = mapped_column(
        UUID(as_uuid=True),
        nullable=False,
        server_default=text("gen_random_uuid()"),
        unique=True,
    )

    entity_uuid: Mapped[UUID] = mapped_column(
        UUID(as_uuid=True), ForeignKey(column="sales.em_entities.uuid"), nullable=False
    )
    account_uuid: Mapped[UUID] = mapped_column(
        UUID(as_uuid=True), ForeignKey(column="sales.acc_accounts.uuid"), nullable=False
    )

    start_on: Mapped[date] = mapped_column(Date, nullable=True)
    end_on: Mapped[date] = mapped_column(Date, nullable=True)

    # Parent relationships
    account = relationship("Accounts", back_populates="entity_accounts")
    entity = relationship("Entities", back_populates="entity_accounts")
