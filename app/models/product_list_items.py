from decimal import Decimal
from uuid import UUID

from sqlalchemy import UUID, Boolean, Integer, Numeric, text, ForeignKey
from sqlalchemy.orm import Mapped, mapped_column, relationship

from .sys_base import SysBase


class ProductListItems(SysBase):
    """
    This SQLAlchemy model represents an item within a product list, including details like
    the associated product, its price, and the permissions for price adjustments at both
    the system and manufacturer levels. It establishes relationships with products, product
    lists, order items, and invoice items.

    ivars:
        id: The primary key of the product list item.
        :vartype id: int
        uuid: Unique identifier for the product list item, generated by the database.
        :vartype uuid: UUID
        product_list_uuid: Foreign key linking the product list item to a specific product list.
        :vartype product_list_uuid: UUID
        product_uuid: Foreign key linking the product list item to a specific product.
        :vartype product_uuid: UUID
        price: The price of the product in the product list item.
        :vartype price: Decimal
        sys_allowed_price_increase: Indicates if a price increase is allowed at the system level.
        :vartype sys_allowed_price_increase: bool
        man_allowed_price_increase: Indicates if a price increase is allowed at the manufacturer level.
        :vartype man_allowed_price_increase: bool
        sys_allowed_price_decrease: Indicates if a price decrease is allowed at the system level.
        :vartype sys_allowed_price_decrease: bool
        man_allowed_price_decrease: Indicates if a price decrease is allowed at the manufacturer level.
        :vartype man_allowed_price_decrease: bool
        product: Relationship to the `Products` model representing the product associated with the item.
        :vartype product: Products
        product_lists: Relationship to the `ProductLists` model representing the product list associated with the item.
        :vartype product_lists: ProductLists
        order_items: Relationship to the `OrderItems` model, linking the product list item to the corresponding order items.
        :vartype order_items: OrderItems
        invoice_items: Relationship to the `InvoiceItems` model, linking the product list item to the corresponding invoice items.
        :vartype invoice_items: InvoiceItems
    """

    __tablename__ = "pm_product_list_items"
    __table_args__ = {"schema": "sales"}

    id: Mapped[int] = mapped_column(
        Integer, primary_key=True, nullable=False, autoincrement=True
    )
    uuid: Mapped[UUID] = mapped_column(
        UUID(as_uuid=True), nullable=False, server_default=text("gen_random_uuid()")
    )

    product_list_uuid: Mapped[UUID] = mapped_column(
        UUID(as_uuid=True),
        ForeignKey(column="sales.pm_product_lists.uuid"),
        nullable=False,
    )
    product_uuid: Mapped[UUID] = mapped_column(
        UUID(as_uuid=True), ForeignKey(column="sales.pm_products.uuid"), nullable=False
    )

    price: Mapped[Decimal] = mapped_column(
        Numeric(10, 2), nullable=False, server_default=text("0.00")
    )

    # local scope
    sys_allowed_price_increase: Mapped[bool] = mapped_column(
        Boolean, server_default=text("False"), nullable=False
    )
    man_allowed_price_increase: Mapped[bool] = mapped_column(
        Boolean, server_default=text("False"), nullable=False
    )
    sys_allowed_price_decrease: Mapped[bool] = mapped_column(
        Boolean, server_default=text("False"), nullable=False
    )
    man_allowed_price_decrease: Mapped[bool] = mapped_column(
        Boolean, server_default=text("False"), nullable=False
    )

    # Parent relationships
    product = relationship("Products", back_populates="product_lists_items")
    product_lists = relationship("ProductLists", back_populates="product_list_items")

    # Child relationships
    order_items = relationship("OrderItems", back_populates="product_list_item")
    invoice_items = relationship("InvoiceItems", back_populates="product_list_item")
