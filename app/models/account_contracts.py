from datetime import date
from uuid import UUID

from sqlalchemy import UUID, Date, Integer, String, text, ForeignKey
from sqlalchemy.orm import Mapped, mapped_column, relationship

from .sys_base import SysBase


class AccountContracts(SysBase):
    """
    Represents an account contract in the sales system.

    This SQL Alchemy model stores contracts linked to accounts, containing metadata, contract status, and notification settings.

    ivars:
        id: The primary key of the account contract.
        :vartype id: int
        uuid: Unique identifier for the contract, generated by the database.
        :vartype uuid: UUID
        account_uuid: Foreign key referencing the associated account.
        :vartype account_uuid: UUIDs
        document_metadata_id: ID for document metadata, if applicable.
        :vartype document_metadata_id: int, optional
        document_metadata_uuid: UUID for document metadata, if applicable.
        :vartype document_metadata_uuid: UUID, optional
        sys_value_type_uuid: System-defined UUID representing the contract type.
        :vartype sys_value_type_uuid: UUID, optional
        start_on: The start date of the contract.
        :vartype start_on: date, optional
        end_on: The end date of the contract.
        :vartype end_on: date, optional
        notification_days: Number of days before the contract ends to send a notification.
        :vartype notification_days: int, optional
        status: The status of the contract.
        :vartype status: str, optional
        account: Relationship to the `Accounts` model.
        :vartype account: Accounts
    """

    __tablename__ = "acc_account_contracts"
    __table_args__ = {"schema": "sales"}

    id: Mapped[int] = mapped_column(
        Integer, primary_key=True, nullable=False, autoincrement=True
    )
    uuid: Mapped[UUID] = mapped_column(
        UUID(as_uuid=True),
        nullable=False,
        unique=True,
        server_default=text("gen_random_uuid()"),
    )

    account_uuid: Mapped[UUID] = mapped_column(
        UUID(as_uuid=True), ForeignKey("sales.acc_accounts.uuid"), nullable=False
    )
    document_metadata_id: Mapped[int] = mapped_column(Integer, nullable=True)
    document_metadata_uuid: Mapped[UUID] = mapped_column(
        UUID(as_uuid=True), nullable=True
    )
    sys_value_type_uuid: Mapped[UUID] = mapped_column(UUID(as_uuid=True), nullable=True)

    start_on: Mapped[date] = mapped_column(Date, nullable=True)
    end_on: Mapped[date] = mapped_column(Date, nullable=True)
    notification_days: Mapped[int] = mapped_column(Integer, nullable=True)
    status: Mapped[str] = mapped_column(String(100), nullable=True)

    # Parent relationship
    account = relationship("Accounts", back_populates="account_contracts")
